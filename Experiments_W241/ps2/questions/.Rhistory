data
print(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
p_vals=rep(NA, 10)
for (i in 10) {
data = merge(d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])],
d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])],
all=TRUE)
data
print(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
p_vals=rep(NA, 10)
for (i in 10) {
data = merge(d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])],
d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])],
all=TRUE)
data
print(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
rep(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'],10)
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
rep(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'],10)
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
rep(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'],10)
d <- fread('../data/list_data_2019.csv')
library(data.table)
library(sandwich)
library(lmtest)
library(ggplot2)
library(knitr)
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
rep(t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value'],10)
p_vals=c()
for (i in 1:10) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
library(data.table)
library(sandwich)
library(lmtest)
library(ggplot2)
library(knitr)
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
p_vals=c()
for (i in 1:10) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
p_vals=c()
for (i in 1:10) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
p_vals=c()
for (i in 1:10) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
ggplot(p_vals)+geom_histogram()
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
#t_test_p_values <- rep(NA, 1000) # fill this in with the p-values from your power analysis
p_vals
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
#ggplot(p_vals)+geom_histogram()
data.table(p_vals)
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
p_vals
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(p_vals)
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(pvalue=p_vals)
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(pvalue=c(p_vals))
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(pvalue=unlist(p_vals))
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(pvalue=unlist(p_vals,use.names=FALSE))
#ggplot(p_vals)+geom_histogram()
#data.table(p_vals)
data.frame(pvalue=unlist(p_vals,use.names=FALSE))
#
x = data.frame(pvalue=unlist(p_vals))
ggplot(x)+geom_histogram()
#
x = as.data.frame(pvalue=unlist(p_vals))
#
x = data.frame(pvalue=unlist(p_vals))
x
ggplot(x)+geom_histogram()
#
df = data.frame(pvalue=unlist(p_vals))
ggplot(df)+geom_histogram()
#
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
df
t_test_rejects <- 'fill this in'
df[df[pvalue]<0.05]
df[df['pvalue']<0.05]
t_test_rejects <- 'fill this in'
count(df[df['pvalue']<0.05])
length(df[df['pvalue']<0.05])
t_test_rejects <- 'fill this in'
t_test_rejects <- length(df[df['pvalue']<0.05])/length(df)
t_test_rejects
length(df)
t_test_rejects <- length(df[df['pvalue']<0.05])/length(df)
t_test_rejects
length(df['pvalues'])
length(df['pvalue'])
t_test_rejects <- length(df[df['pvalue']<0.05])/length(df)
t_test_rejects
df['pvalue']
t_test_rejects <- length(df[df['pvalue']<0.05])/length(df)
t_test_rejects
count(df['pvalue'])
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
t_test_rejects
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
t_test_p_values <- p_vals # fill this in with the p-values from your power analysis
## you can either write a for loop, use an apply method, or use replicate (which is an easy-of-use wrapper to an apply method)
#
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
t_test_rejects
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
t_test_p_values <- p_vals
}
power(11)
percentages_to_sample <- 'fill this in'
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
return(p_vals)
}
x = power(11)
percentages_to_sample <- 'fill this in'
x
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(11)
percentages_to_sample <- 'fill this in'
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(20)
percentages_to_sample <- 'fill this in'
d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5.5)])]
d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 6)])]
d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 6)])]
d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 7)])]
d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 7)])]
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(20)
percentages_to_sample <- 'fill this in'
ggplot(df,aes(x=pvalue))+geom_histogram()
p_vals=c()
size=20
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(2)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(4)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(4)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(6)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(6)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
ggplot(df,aes(x=pvalue))+geom_histogram()
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(8)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(8)
percentages_to_sample <- 'fill this in'
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(10)
percentages_to_sample <- 'fill this in'
for (i in 1:20){
power(i)
}
d <- fread('../data/list_data_2019.csv')
library(data.table)
library(sandwich)
library(lmtest)
library(ggplot2)
library(knitr)
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
d <- fread('../data/list_data_2019.csv')
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], 5)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], 5)])]
data = merge(x,y,all=TRUE)
t_test_ten_people <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid]) # this should be a test object
t_test_ten_people
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(10)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(10)
power = function(size){
p_vals=c()
for (i in 1:1000) {
x = d[c(d[,  sample(d[, .I[uniform_price_auction == 1]], size/2)])]
y = d[c(d[,  sample(d[, .I[uniform_price_auction == 0]], size/2)])]
data = merge(x,y,all=TRUE)
p_vals[i] <- t.test(data[uniform_price_auction==1,bid]-data[uniform_price_auction==0,bid])['p.value']
}
df = data.frame(pvalue=unlist(p_vals))
t_test_rejects <- length(df[df['pvalue']<0.05])/1000
return(t_test_rejects)
}
power(10)
percentages_to_sample <- 'fill this in'
for (i in 1:20){
power(i)
}
for (i in 1:20){
trycatch({power(i)})
}
for (i in 1:20){
power(i)
}
for (i in 6:20){
power(i)
}
for (i in 7:20){
power(i)
}
for (i in 8:20){
power(i)
}
for (i in 9:20){
power(i)
}
for (i in 10:20){
power(i)
}
for (i in 10:20){
power(i)
}
